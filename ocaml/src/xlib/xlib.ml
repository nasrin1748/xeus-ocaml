open Xutil

(* A mutable list to store outputs generated by user functions. *)
let extra_outputs = ref []

(* Internal function to add an output to the list. *)
let add_output output =
  extra_outputs := output :: !extra_outputs

(* Function to be called by the toplevel to retrieve and clear outputs for the last execution. *)
let get_and_clear_outputs () =
  let result = List.rev !extra_outputs in
  extra_outputs := [];
  result

(**
 * Generic helper to create a single-MIME-type display data object and add it to the output list.
 *)
let create_and_add_display_data mime_type content =
  let data = `Assoc [(mime_type, content)] in
  add_output (Protocol.DisplayData data)

(* The most generic function, exposed to the user. *)
let output_display_data data =
  add_output (Protocol.DisplayData data)

(* --- Text-based formats --- *)

let output_html s =
  create_and_add_display_data "text/html" (`String s)

let output_markdown s =
  create_and_add_display_data "text/markdown" (`String s)

let output_latex s =
  create_and_add_display_data "text/latex" (`String s)

let output_svg s =
  create_and_add_display_data "image/svg+xml" (`String s)

(* --- JSON-based formats --- *)
(* For these, the frontend expects a JSON object, not a string containing JSON.
   So we must parse the string into a Yojson.Safe.t value first. *)

let output_json s =
  try
    let json_val = Yojson.Safe.from_string s in
    create_and_add_display_data "application/json" json_val
  with Yojson.Json_error msg ->
    let err_msg = Printf.sprintf "JSON parsing error: %s" msg in
    add_output (Protocol.Stderr err_msg)

let output_vegalite s =
  try
    let json_val = Yojson.Safe.from_string s in
    create_and_add_display_data "application/vnd.vegalite.v5+json" json_val
  with Yojson.Json_error msg ->
    let err_msg = Printf.sprintf "Vega-Lite JSON parsing error: %s" msg in
    add_output (Protocol.Stderr err_msg)

let output_vega s =
  try
    let json_val = Yojson.Safe.from_string s in
    create_and_add_display_data "application/vnd.vega.v5+json" json_val
  with Yojson.Json_error msg ->
    let err_msg = Printf.sprintf "Vega JSON parsing error: %s" msg in
    add_output (Protocol.Stderr err_msg)

(* --- Binary formats (via Base64) --- *)

let output_png_base64 s =
  create_and_add_display_data "image/png" (`String s)

let output_jpeg_base64 s =
  create_and_add_display_data "image/jpeg" (`String s)

let output_gif_base64 s =
  create_and_add_display_data "image/gif" (`String s)

let output_pdf_base64 s =
  create_and_add_display_data "application/pdf" (`String s)
