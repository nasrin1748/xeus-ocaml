(**
    @author Davy Cottet
   
    A library of helper functions automatically opened in the `xeus-ocaml`
    toplevel. It provides a simple API for users to generate and display rich
    outputs (like HTML, Markdown, and plots) in their Jupyter notebooks.
   
    The mechanism works by maintaining a mutable list of {!Protocol.output}
    values. Each function in this module, such as {!output_html}, adds a
    `DisplayData` item to this list. After each code execution in the toplevel,
    the {!Xtoplevel} module calls {!get_and_clear_outputs} to collect and then
    clear this list, sending the rich outputs to the Jupyter frontend for
    rendering.
 *)

(** A mutable list to store rich outputs generated by user functions for the current cell execution. *)
let extra_outputs = ref []

(**
    Internal function to add an output to the global list. This is the core
    mechanism used by all public output functions. It prepends the output to the list.
    @param output The {!Protocol.output} value to add.
 *)
let add_output output =
  extra_outputs := output :: !extra_outputs

(**
    Internal function for the toplevel to retrieve and clear all pending rich
    outputs generated during the last code execution. This is not intended
    for direct use by end-users.
    @return A list of {!Protocol.output} values in the order they were created.
 *)
let get_and_clear_outputs () =
  let result = List.rev !extra_outputs in
  extra_outputs := [];
  result

(**
    A generic helper to create a display data object with a single MIME type
    and add it to the output list.
    @param mime_type The IANA MIME type string (e.g., "text/html").
    @param content The [`Yojson.Safe.t`] value for the content.
 *)
let create_and_add_display_data mime_type content =
  let data = `Assoc [(mime_type, content)] in
  add_output (Protocol.DisplayData data)

(**
    Renders a full MIME bundle as a cell output. This is the most flexible
    function for creating rich output with multiple representations.
    @param data A Yojson object representing the MIME bundle.
    @example [`output_display_data (`Assoc [("text/plain", `String "plain text"); ("text/html", `String "<b>HTML</b>")])]
    @sideeffect Adds a {!Protocol.DisplayData} output to the queue for rendering
                in the Jupyter cell output.
 *)
let output_display_data data =
  add_output (Protocol.DisplayData data)

(* --- Text-based formats --- *)

(**
    Renders a raw HTML string as a cell output. The frontend will interpret
    and display the HTML content.
    @param s The HTML content as a string.
 *)
let output_html s =
  create_and_add_display_data "text/html" (`String s)

(**
    Renders a raw Markdown string as a cell output. The frontend will interpret
    and display the formatted Markdown.
    @param s The Markdown content as a string.
 *)
let output_markdown s =
  create_and_add_display_data "text/markdown" (`String s)

(**
    Renders a raw LaTeX string as a cell output, typically for displaying
    mathematical equations.
    @param s The LaTeX content as a string (e.g., `"$$ e^{i\pi} + 1 = 0 $$"`).
 *)
let output_latex s =
  create_and_add_display_data "text/latex" (`String s)

(**
    Renders an SVG image from its XML string representation.
    @param s A string containing the full `<svg>...</svg>` XML markup.
 *)
let output_svg s =
  create_and_add_display_data "image/svg+xml" (`String s)

(* --- JSON-based formats --- *)
(* For these, the frontend expects a JSON object, not a string containing JSON.
   So we must parse the string into a Yojson.Safe.t value first. *)

(**
    Renders a JSON string as a collapsible, interactive tree view in the output.
    This function parses the input string; if parsing fails, an error message is
    sent to stderr instead of producing an output.
    @param s A string containing valid JSON.
 *)
let output_json s =
  try
    let json_val = Yojson.Safe.from_string s in
    create_and_add_display_data "application/json" json_val
  with Yojson.Json_error msg ->
    let err_msg = Printf.sprintf "JSON parsing error: %s" msg in
    add_output (Protocol.Stderr err_msg)

(**
    Renders an interactive Vega-Lite plot from its JSON specification.
    This function parses the input string; if parsing fails, an error message is
    sent to stderr instead.
    @param s A string containing a valid Vega-Lite JSON specification.
 *)
let output_vegalite s =
  try
    let json_val = Yojson.Safe.from_string s in
    create_and_add_display_data "application/vnd.vegalite.v5+json" json_val
  with Yojson.Json_error msg ->
    let err_msg = Printf.sprintf "Vega-Lite JSON parsing error: %s" msg in
    add_output (Protocol.Stderr err_msg)

(**
    Renders an interactive Vega plot from its JSON specification.
    This function parses the input string; if parsing fails, an error message is
    sent to stderr instead.
    @param s A string containing a valid Vega JSON specification.
 *)
let output_vega s =
  try
    let json_val = Yojson.Safe.from_string s in
    create_and_add_display_data "application/vnd.vega.v5+json" json_val
  with Yojson.Json_error msg ->
    let err_msg = Printf.sprintf "Vega JSON parsing error: %s" msg in
    add_output (Protocol.Stderr err_msg)

(* --- Binary formats (via Base64) --- *)

(**
    Displays a PNG image from a Base64-encoded string.
    @param s The Base64-encoded string of the PNG image data.
 *)
let output_png_base64 s =
  create_and_add_display_data "image/png" (`String s)

(**
    Displays a JPEG image from a Base64-encoded string.
    @param s The Base64-encoded string of the JPEG image data.
 *)
let output_jpeg_base64 s =
  create_and_add_display_data "image/jpeg" (`String s)

(**
    Displays a GIF image from a Base64-encoded string.
    @param s The Base64-encoded string of the GIF image data.
 *)
let output_gif_base64 s =
  create_and_add_display_data "image/gif" (`String s)

(**
    Renders an inline PDF document from a Base64-encoded string. The frontend
    may embed a PDF viewer directly in the cell output.
    @param s The Base64-encoded string of the PDF file data.
 *)
let output_pdf_base64 s =
  create_and_add_display_data "application/pdf" (`String s)