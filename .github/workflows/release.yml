name: Release and Deploy

# This workflow is triggered ONLY when a new tag matching the pattern 'v*.*.*' is pushed.
# It can also be triggered manually via the GitHub Actions UI.
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

# Define permissions required for the jobs.
permissions:
  contents: write      # To create GitHub Releases.
  pages: write         # To deploy to GitHub Pages.
  id-token: write      # To authenticate with GitHub Pages.

# Ensure that only one deployment to GitHub Pages runs at a time.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # This job handles the entire build and release process.
  build_and_release:
    name: Build, Release, and Prepare Deployment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        # A common dependency for C++ projects and rattler-build.
        uses: ssrobins/install-cmake@v1

      - name: Setup Pixi environment
        uses: prefix-dev/setup-pixi@v0.9.1
        with:
          cache: true

      - name: Setup OCaml Environment
        # Initializes the OPAM environment from scratch for a clean release build.
        run: pixi run -e ocaml setup

      - name: Build OCaml (Release Profile)
        # Compiles the OCaml source to JavaScript with release optimizations.
        # This is a critical prerequisite for the 'rattler-build' step within 'build-all'.
        run: pixi run -e ocaml release

      - name: Build WASM Kernel and JupyterLite Site
        # This command now uses the release-optimized JS files to:
        # 1. Build the WASM kernel package using rattler-build.
        # 2. Install the kernel into a local environment.
        # 3. Build the static JupyterLite website into the '_output' directory.
        run: pixi run build-all

      - name: Upload Conda Package to prefix.dev
        # This task uploads the built kernel package to your private prefix.dev channel.
        # It requires the PREFIX_API_KEY secret to be set in your repository.
        env:
          PREFIX_API_KEY: ${{ secrets.PREFIX_API_KEY }}
        run: pixi run upload-kernel  

      - name: Create GitHub Release and Upload Assets
        # This action creates a new GitHub Release for the pushed tag.
        # It attaches the built conda packages from the 'output' directory as release assets.
        uses: softprops/action-gh-release@v2
        with:
          files: |
            output/**/*.conda
            output/**/*.tar.bz2
      
      - name: Setup GitHub Pages
        # Configures the environment for deploying to GitHub Pages.
        uses: actions/configure-pages@v5

      - name: Upload JupyterLite site as Pages artifact
        # Uploads the contents of the '_output' directory as a deployable artifact.
        # The 'deploy' job will use this artifact.
        uses: actions/upload-pages-artifact@v4
        with:
          path: './_output'

  # This job is dedicated to deploying the built site to GitHub Pages.
  deploy:
    name: Deploy to GitHub Pages
    # This job only runs after the 'build_and_release' job has successfully completed.
    needs: build_and_release
    runs-on: ubuntu-latest

    # Specify permissions required specifically for this deployment job.
    permissions:
      pages: write
      id-token: write

    # Configure the deployment environment for GitHub Pages.
    # This provides access to the deployment URL in the logs.
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy JupyterLite site to GitHub Pages
        id: deployment
        # This action takes the artifact uploaded in the previous job and deploys it.
        uses: actions/deploy-pages@v4