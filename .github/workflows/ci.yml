# /.github/workflows/ci.yml

name: CI, Release, and Deploy

on:
  push:
    branches: ["main"]
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE.md'

  pull_request:
    branches: ["main"]
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE.md'
      
  workflow_dispatch:

permissions:
  contents: write      # Needed to push tags and create releases
  pages: write         # To deploy to GitHub Pages
  id-token: write      # To authenticate with GitHub Pages

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CMake
        uses: ssrobins/install-cmake@v1

      - name: Setup Pixi environment
        uses: prefix-dev/setup-pixi@v0.9.1
        with:
          cache: true
          
      - name: Verify Version Consistency
        run: pixi run verify-version

      - name: Build Kernel
        run: pixi run build-kernel

      - name: Run JavaScript Tests
        run: pixi run test

      - name: Install Kernel for JupyterLite
        run: pixi run install-kernel

      - name: Build JupyterLite
        run: pixi run build-jupyterlite

      - name: Build C++/Ocam API Documentation
        run: pixi run build-docs

      # Only upload artifacts on pushes to main, not on pull requests.
      - name: Upload Conda package artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: conda-packages
          path: |
            output/**/*.conda
            output/**/*.tar.bz2

      - name: Upload JupyterLite site artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: jupyterlite-site
          path: _output/

  release:
    name: Create Release and Prepare Deployment
    runs-on: ubuntu-latest
    needs: build_and_test
    # This job now handles tagging, package uploading, and GitHub releases.
    # It only runs if the build succeeded AND it was a push to main.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Check for recipe version change
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            recipe:
              - 'recipe/recipe.yaml'

      - name: Continue only if recipe changed
        if: steps.filter.outputs.recipe != 'true'
        run: echo "Recipe version did not change. Skipping release." && exit 0
      
      - name: Download Conda package artifact
        uses: actions/download-artifact@v4
        with:
          name: conda-packages
          path: output/

      - name: Download JupyterLite site artifact
        uses: actions/download-artifact@v4
        with:
          name: jupyterlite-site
          path: _output/

      # --- Steps from the old release.yml, now using the downloaded artifacts ---
      - name: Extract version from recipe
        id: get_version
        uses: mikefarah/yq@v4
        with:
          cmd: yq e '.context.version' 'recipe/recipe.yaml'

      - name: Create and Push Tag
        run: |
          VERSION=${{ steps.get_version.outputs.result }}
          TAG="v${VERSION}"
          echo "Version from recipe is ${VERSION}"
          
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "Tag ${TAG} already exists remotely. No new tag will be created."
          else
            echo "Tag ${TAG} does not exist. Creating and pushing new tag."
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git tag "${TAG}" -m "Release version ${VERSION}"
            git push origin "${TAG}"
          fi
          
      - name: Setup Pixi (for upload command)
        uses: prefix-dev/setup-pixi@v0.9.1
        with:
          cache: true

      - name: Upload Conda Package to prefix.dev
        env:
          PREFIX_API_KEY: ${{ secrets.PREFIX_API_KEY }}
        run: pixi run upload-kernel

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.result }}
          files: |
            output/**/*.conda
            output/**/*.tar.bz2
      
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload JupyterLite site as Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: './_output'

  deploy:
    name: Deploy to GitHub Pages
    needs: release # This now depends on our new consolidated release job
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy JupyterLite site to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4